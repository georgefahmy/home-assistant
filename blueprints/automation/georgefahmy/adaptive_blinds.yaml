blueprint:
  name: Adaptive Blinds
  description: An automation that takes into account the angle of the sun and adjusts tilted blinds to best angle
  domain: automation
  input:
    start_time:
      name: Starting Time
      description: Set the start time that the automation should begin running
      default: "00:00:00"
      selector:
        time:

    end_time:
      name: End Time
      description: Set the end time that the automation should stop running
      default: "23:59:59"
      selector:
        time:

    slat_spacing:
      name: Slat Spacing
      description: The measured distance/space between each slat in cm
      default: 5.9
      selector:
        number:
          min: 1
          max: 100
          step: 0.05
          mode: box

    slat_depth:
      name: Slat Depth
      description: The measured width of each slat in cm
      default: 6.2
      selector:
        number:
          min: 1
          max: 100
          step: 0.05
          mode: box

    min_elevation:
      name: Minimum Solar Elevation
      description: The solar elevation below which the blinds will return to default values
      default: 0
      selector:
        number:
          min: 0
          max: 90
          step: 0.5
          mode: box

    max_elevation:
      name: Maximum Solar Elevation
      description: The solar elevation below which the blinds will return to default values
      default: 90
      selector:
        number:
          min: 0
          max: 90
          step: 0.5
          mode: box

    minimum_interval:
      name: Minimum Interval
      description: The minimum time between slat adjustment (default is 2 minutes). Increase value to save battery.
      default: 2
      selector:
        number:
          min: 2
          max: 90
          step: 1
          mode: box

    window_azimuth:
      name: Window Azimuth
      description: The azimuth of the window(s) you want to automate (e.g. 180 is South facing)
      selector:
        number:
          min: 0
          max: 359
          step: 0.05
          unit_of_measurement: deg
          mode: box

    fov_left_input:
      name: Field of View Left
      description: the angle to the left side of the window which the sun is exposed
      default: 90
      selector:
        number:
          min: 0
          max: 90
          step: 1

    fov_right_input:
      name: Field of View Right
      description: the angle to the right side of the window which the sun is exposed
      default: 90
      selector:
        number:
          min: 0
          max: 90
          step: 1

    default_position:
      name: Default slat position
      description: The default slat position for the cover (0 closed down, 50 open, 100 closed up)
      default: 50
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider

    sun_down_position:
      name: Default slat position for after sunset (or before sunrise)
      description: The default slat position for the cover when no sun exposure
      default: 0
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider

    outdoor_temperature_sensor:
      name: Outdoor Temperature Sensor
      description: Outdoor temperature sensor used for summer/winter modes to improve efficiency
      selector:
        entity:
          multiple: false
          filter:
            device_class: temperature
            domain: sensor

    target_cover:
      name: Target Cover Entity
      description: the entity which you want to apply this automation
      selector:
        target:
          entity:
            - domain: cover

variables:
  slat_spacing: !input slat_spacing
  slat_depth: !input slat_depth
  min_elevation: !input min_elevation
  max_elevation: !input max_elevation
  minimum_interval: !input minimum_interval
  window_azimuth: !input window_azimuth
  fov_left_input: !input fov_left_input
  fov_right_input: !input fov_right_input
  default_position: !input default_position
  sun_down_position: !input sun_down_position

triggers:
  - trigger: state
    entity_id:
      - sun.sun

conditions:
  - condition: state
    entity_id: sun.sun
    state: above_horizon
  - condition: numeric_state
    entity_id: sensor.sun_solar_elevation
    above: !input min_elevation
    below: !input max_elevation
  - condition: time
    after: !input start_time
    before: !input end_time
  - condition: template
    value_template: >-
      {{ now() - this.attributes.last_triggered >= timedelta(minutes=minimum_interval)}}

actions:
  - action: cover.set_cover_tilt_position
    data:
      tilt_position: >
        {% set rad2deg = pi/180 %}
        {% set deg2rad =180/pi %}

        {% set sun_azimuth = states('sensor.sun_solar_azimuth') |float %}
        {% set sun_elevation = states('sensor.sun_solar_elevation') | float %}
        {% set sun_up = states('sun.sun') == 'above_horizon' %}

        {% set fov_left = window_azimuth - fov_left_input %}
        {% set fov_right = window_azimuth + fov_right_input %}
        {% set valid = fov_left < sun_azimuth < fov_right and min_elevation < sun_elevation <max_elevation %}
        {% set gamma = (window_azimuth - sun_azimuth + 180) % 360 - 180 %}
        {% set beta = atan(tan(sun_elevation*rad2deg) / cos(gamma*rad2deg)) %}
        {% set sqrt_value = (tan(beta) ** 2) - ((slat_spacing/slat_depth)**2) + 1 %}
        {% set slat = 2 * atan(
            (
              tan(beta)
              + sqrt(
                sqrt_value | abs
              )
            )
            / (1+slat_spacing/slat_depth))
          *deg2rad
        %}
        {% set calculated_position = 2 + (1 - slat/180)*100  %}
        {% if sun_up == true %}
          {% if valid %}
            {{ calculated_position | int }}
          {% else %}
            {{ default_position }}
          {% endif %}
        {% else %}
            {{ sun_down_position }}
        {% endif %}
    target: !input target_cover
mode: single
